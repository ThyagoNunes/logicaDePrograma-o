function mergeSort(arr) {
    if (arr.length <= 1) {
        return arr;
    }
    /* preciso achar o meio do array e quebrar em 2 partes o da esquerda e direita  */
    const middle = Math.floor(arr.length / 2);

    /* Recursividade para com todos os arrays achados até que reste uma única unidade de elemento */
    const left = mergeSort(arr.slice(0, middle));
    const right = mergeSort(arr.slice(middle));

    return merge(left, right);
}

/* Arrays montados, comparar elemento e retornar um único array organizado */
function merge(left, right) {
    let result = [];
    let leftIndex = 0;
    let rightIndex = 0;

    while (leftIndex < left.length && rightIndex < right.length) {
        if (left[leftIndex] < right[rightIndex]) {
            result.push(left[leftIndex])
            leftIndex++;
        } else {
            result.push(right[rightIndex])
            rightIndex++;
        }
    }
    return result.concat(left.slice(leftIndex)).concat(right.slice(rightIndex));
}

function quickSort(arr) {
    if (arr.length <= 1) {
        return arr;
    }

    const pivot = arr[arr.length - 1];
    const left = [];
    const right = [];

    for (let i = 0; i < arr.length - 1; i++){
        if (arr[i] < pivot) {
            left.push(arr[i])
        } else {
            right.push(arr[i])
        }
    }

    return [...quickSort(left), pivot, ...quickSort(right)]
}

// Função de busca binária
function binarySearch(arr, target) {
    // Primeiro, ordena o array usando quick sort
  arr = quickSort(arr);

  let left = 0;
  let right = arr.length - 1;

  while (left <= right) {
    let mid = Math.floor((left + right) / 2);

    if (arr[mid] === target) {
      return mid;
    } else if (arr[mid] < target) {
      left = mid + 1;
    } else { 
      right = mid - 1
    }
  }
  return -1;
  
}

// Exemplo de uso:
const arr = [712, 98, 169, 382, 584, 653, 425, 741, 289, 235, 901, 347, 486, 857, 534, 679, 203, 576, 819, 143, 906, 652, 425, 498, 710, 814, 597, 381, 256, 532, 948, 165, 810, 695, 870, 319, 564, 421, 634, 187, 250, 73, 395, 687, 812, 139, 926, 261, 329, 580, 865, 794, 510, 910, 729, 456, 681, 248, 62, 538, 713, 572, 389, 891, 234, 159, 502, 678, 873, 306, 620, 357, 856, 104, 519, 934, 369, 792, 807, 917, 406, 569, 175, 768, 421, 892, 83, 287, 614, 534, 168, 713, 692, 459, 295, 563, 980, 749, 812, 650, 913, 625, 307, 487, 823, 647, 542, 524, 730, 312, 895, 781, 976, 187, 704, 872, 261, 658, 321, 953, 128, 865, 405, 960, 752, 590, 137, 361, 481, 642, 510, 368, 954, 804, 742, 327, 214, 523, 679, 836, 197, 659, 860, 872, 319, 198, 125, 834, 519, 865, 942, 327, 526, 901, 163, 241, 503, 498, 896, 306, 168, 286, 723, 815, 568, 914, 249, 735, 564, 239, 876, 635, 452, 394, 793, 514, 950, 286, 720, 158, 689, 107, 805, 927, 265, 590, 731, 149, 538, 854, 416, 204, 724, 920, 175, 873, 697, 365, 489, 670, 831, 263, 582, 579, 647, 258, 705, 410, 814, 306, 946, 824, 367, 940, 613, 509, 628, 579, 364, 730, 589, 214, 859, 314, 872, 927, 390, 106, 325, 534, 295, 183, 637, 159, 492, 470, 102, 431, 398, 896, 783, 578, 936, 951, 834, 942, 625, 318, 537, 780, 904, 571, 968, 756, 104, 853, 634, 467, 927, 710, 482, 356, 237, 194, 382, 870, 921, 614, 830, 576, 793, 274, 153, 460, 780, 637, 154, 360, 291, 268, 178, 410, 742, 675, 786, 809, 498, 145, 581, 872, 513, 952, 320, 463, 126, 584, 239, 394, 942, 702, 761, 125, 913, 542, 518, 864, 471, 317, 590, 823, 678, 856, 710, 683, 145, 953, 621, 287, 792, 490, 503, 258, 102, 725, 147, 341, 801, 378, 264, 156, 625, 530, 823, 590, 240, 359, 985, 938, 874, 964, 413, 960, 869, 145, 297, 145, 204, 765, 130, 942, 836, 514, 406, 981, 790, 456, 978, 652, 703, 382, 789, 507, 259, 603, 370, 482, 628, 514, 364, 795, 183, 147, 510, 168, 672, 302, 698, 287, 901, 927, 613, 539, 648, 964, 798, 132, 512, 426, 237, 704, 679, 725, 185, 932, 738, 942, 248, 601, 235, 193, 156, 872, 345, 415, 708, 413, 160, 381, 136, 450, 204, 514, 613, 392, 830, 502, 946, 609, 481, 345, 469, 387, 871, 614, 429, 392, 950, 154, 247, 175, 761, 874, 105, 694, 125, 635, 832, 821, 506, 647, 859, 523, 526, 290, 689, 538, 726, 180, 496, 159, 785, 509, 301, 627, 801, 623, 815, 278, 206, 145, 973, 956, 921, 739, 408, 237, 735, 154, 346, 561, 519, 769, 623, 951, 482, 852, 645, 501, 549, 493, 874, 401, 708, 581, 217, 824, 670, 326, 832, 465, 457, 492, 329, 784, 597, 301, 849, 943, 614, 567, 902, 489, 831, 236, 976, 340, 236, 587, 498, 715, 832, 912, 659, 549, 493, 654, 192, 513, 719, 275, 657, 518, 109, 547, 364, 238, 547, 715, 395, 693, 794, 365, 187, 592, 851, 742, 785, 146, 923, 324, 697, 479, 750, 396, 136, 940, 107, 607, 769, 374, 108, 406, 562, 457, 135, 703, 298, 594, 468, 890, 125, 769, 513, 234, 702, 726, 852, 905, 825, 541, 580, 457, 301, 827, 854, 412, 231, 158, 201, 948, 735, 813, 453, 324, 413, 398, 281, 427, 340, 407, 625, 564, 578, 659, 713, 610, 832, 825, 641, 692, 196, 329, 321, 419, 507, 930, 752, 508, 432, 108, 267, 976, 437, 145, 185, 543, 842, 324, 791, 213, 479, 698, 351, 206, 376, 810, 241, 950, 382, 590, 945, 680, 946, 725, 294, 549, 789, 896, 827, 573, 201, 536, 378, 649, 197, 435, 328, 648, 963, 675, 957, 624, 370, 789, 269, 146, 472, 145, 789, 925, 641, 120, 597, 875, 754, 581, 965, 980, 784, 753, 705, 146, 781, 419, 193, 920]
let target = 62;

// Busca o elemento no array
let index = binarySearch(arr, target);

if (index !== -1) {
    console.log(`O elemento ${target} foi encontrado no índice ${index}.`);
} else {
    console.log(`O elemento ${target} não foi encontrado no array.`);
}
